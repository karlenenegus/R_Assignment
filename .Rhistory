# Maize vs Teosinte SNP numbers by chromosome
reformatted.genos %>%
# filter(SNP_Type=="heterozygous")%>%
# filter(unique(.[,1:5])) %>%
ggplot(., aes(x=Chromosome, fill=Species))
# Maize vs Teosinte SNP numbers by chromosome
reformatted.genos %>%
# filter(SNP_Type=="heterozygous")%>%
# filter(unique(.[,1:5])) %>%
ggplot(., aes(x=Species, fill=Chromosome))
# Maize vs Teosinte SNP numbers by chromosome
reformatted.genos %>%
# filter(SNP_Type=="heterozygous")%>%
# filter(unique(.[,1:5])) %>%
ggplot(., aes(x=Species, fill=Chromosome)) +
geom_bar()
# SNPs by Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), fill=SNP_Type)) +
geom_histogram()+
facet_grid(Chromosome~Species)
# SNPs by Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), fill=SNP_Type)) +
geom_histogram(position = "dodge")
# SNPs by Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), fill=SNP_Type)) +
geom_histogram(position = "dodge")
# SNPs by Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), fill=SNP_Type)) +
geom_histogram(position = "dodge")+
facet_grid(Chromosome~Species)
# SNPs by Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), fill=SNP_Type)) +
geom_histogram()+
facet_grid(Chromosome~Species)
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), fill=SNP_Type)) +
geom_histogram()+
facet_grid(Chromosome~Species)+
xlab("Position")
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), fill=SNP_Type)) +
geom_violin()+
facet_grid(Chromosome~Species)+
xlab("Position")
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), y=Chromosome, fill=SNP_Type)) +
geom_violin()+
facet_grid(Chromosome~Species)+
xlab("Position")
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), y=Chromosome, fill=SNP_Type)) +
geom_violin()+
facet_grid(.~Species)+
xlab("Position")
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), y=Chromosome, fill=Speicies)) +
geom_violin()+
facet_grid(.~SNP_Type)+
xlab("Position")
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), y=Chromosome, fill=Species)) +
geom_violin()+
facet_grid(.~SNP_Type)+
xlab("Position")
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), fill=Species)) +
geom_histogram()+
facet_grid(Chromosome.~SNP_Type)+
xlab("Position")
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), fill=Species)) +
geom_histogram()+
facet_grid(Chromosome~SNP_Type)+
xlab("Position")
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), fill=SNP_Type)) +
geom_histogram(position = "dodge")+
facet_grid(Chromosome~Species)+
xlab("Position")
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), fill=SNP_Type)) +
geom_histogram()+
facet_grid(Chromosome~Species)+
xlab("Position")
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), y=Species, fill=SNP_Type)) +
geom_violin()+
facet_grid(Chromosome~.)+
xlab("Position")
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), y=Species, fill=SNP_Type)) +
geom_violin()+
facet_grid(Chromosome~SNP_Type)+
xlab("Position")
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), y=Species, fill=Species)) +
geom_violin()+
facet_grid(Chromosome~SNP_Type)+
xlab("Position")
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), y=Species, fill=Species, alpha=Chromosome)) +
geom_violin()+
facet_grid(Chromosome~SNP_Type)+
xlab("Position")
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), y=Species, fill=Species, alpha=SNP_Type)) +
geom_violin()+
facet_grid(Chromosome~SNP_Type)+
xlab("Position")
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
ggplot(., aes(x=as.numeric(Position), y=Species, fill=Chromosome, alpha=Species)) +
geom_violin()+
facet_grid(Chromosome~SNP_Type)+
xlab("Position")
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
filter((SNP_Type=="unknown")==FALSE) %>%
ggplot(., aes(x=as.numeric(Position), y=Species, fill=Chromosome, alpha=Species)) +
geom_violin()+
facet_grid(Chromosome~SNP_Type)+
xlab("Position")
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
filter((SNP_Type=="unknown")==FALSE) %>%
ggplot(., aes(x=as.numeric(Position), y=Species, fill=Species)) +
geom_violin()+
facet_grid(Chromosome~SNP_Type)+
xlab("Position")
# SNPs along Chromosome
reformatted.genos %>%
filter(!is.na(as.numeric(Position))) %>%
filter((SNP_Type=="unknown")==FALSE) %>%
ggplot(., aes(x=as.numeric(Position), y=Species, fill=Species, alpha=Chromosome)) +
geom_violin()+
facet_grid(Chromosome~SNP_Type)+
xlab("Position")
#Read datasets
mtfs <- read_tsv("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/motif_recombrates.txt")
rpts <- read_tsv("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/motif_repeats.txt")
rpts2 <- rpts %>%
unite(pos, chr, motif_start, sep="-") %>% ## new function!
select(name, pos) %>%
inner_join(mtfs, by="pos")
p <- ggplot(rpts2, aes(x=dist, y=recom)) + geom_point(size=1, color="grey") +
geom_smooth(method='loess', se=FALSE, span=1/10) +
facet_wrap( ~ Chromosome)
p
View(rpts2)
p <- ggplot(rpts2, aes(x=dist, y=recom)) + geom_point(size=1, color="grey") +
geom_smooth(method='loess', se=FALSE, span=1/10) +
facet_wrap( ~ chr)
p
warnings()
p <- ggplot(rpts2, aes(x=dist, y=recom)) + geom_point(size=1, color="grey") +
geom_smooth(method='loess', se=FALSE, span=1/10) +
facet_wrap( ~ sort(chr))
p
p <- ggplot(rpts2, aes(x=dist, y=recom)) + geom_point(size=1, color="grey") +
geom_smooth(method='loess', se=FALSE, span=1/10) +
facet_wrap( ~ sort(as.numeric(chr)))
p
p <- ggplot(rpts2, aes(x=dist, y=recom)) + geom_point(size=1, color="grey") +
geom_smooth(method='loess', se=FALSE, span=1/10) +
facet_wrap( ~ sort(chr))
as.factor(rpts2$chr)
levels(as.factor(rpts2$chr))
sort(levels(as.factor(rpts2$chr)))
?sort9
?sort()
rpts2$chr <- as.factor(rpts2$chr)
levels(rpts2$chr)
paste(chr, 1:20, sep"")
paste(chr, 1:20, sep""))
paste(chr, 1:20, sep"")
lapply(1:20, paste, "chr", sep"")
lapply(1:20, paste, "chr", sep="")
lapply(paste, "chr", sep="", 1:20, )
lapply(1:20, paste, "chr", ., sep="")
lapply(1:20, paste, "chr", ., sep="")
?lapply()
lapply(1:20, paste, "chr", sep="")
reformatted.genos %>%
# filter(SNP_Type=="heterozygous")%>%
# filter(unique(.[,1:5])) %>%
ggplot(., aes(x=Species, fill=SNP_Type)) +
geom_bar(position = "dodge")
reformatted.genos %>%
# filter(SNP_Type=="heterozygous")%>%
# filter(unique(.[,1:5])) %>%
ggplot(., aes(x=Species, fill=SNP_Type)) +
geom_bar(position = "fill")
?xlab()
reformatted.genos %>%
# filter(SNP_Type=="heterozygous")%>%
# filter(unique(.[,1:5])) %>%
ggplot(., aes(x=Species, fill=SNP_Type)) +
geom_bar(position = "fill")+
ggtitle("Proportions of SNP Types by Species")
?lapply
lapply(ll, mean)
ll <- list(a=rnorm(6, mean=1), b=rnorm(6, mean=4), c=rnorm(6, mean=6))
ll
lapply(ll, mean)
do.call(assign, lapply(ll, mean))
?do.call()
lapply(ll, mean)
do.call(assign, 1:3, lapply(ll, mean))
do.call(assign, c(a, b, c), lapply(ll, mean))
do.call(assign, c("a", "b", "c"), lapply(ll, mean))
do.call(assign, list(c("a", "b", "c"), lapply(ll, mean)))
View(a)
lapply(lapply(ll, mean), assign)
lapply(ll, mean)
lapply(lapply(ll, mean), assign, c("a", "b", "c"))
lapply()
?lapply()
assign("a", lapply(ll, mean))
assign("a", lapply(ll, mean)[1])
assign("a", lapply(ll, mean)[[1]])
lapply(lapply(ll, mean), assign)
?assign()
lapply(lapply(ll, mean), assign, x=c("a", "b", "c"))
?do.call()
do.call(assign, c(c("a", "b", "c"), lapply(ll, mean)))
unique(reformatted.genos$Sample_ID)
unique(reformatted.genos$Sample_ID) %>% length
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
setwd("/home/karlene/Desktop/BCB546_2022/R_Assignment")
library(tidyverse)
setwd("/home/karlene/Desktop/BCB546_2022/R_Assignment")
geno <- read_delim("https://raw.githubusercontent.com/EEOB-BioData/BCB546-Spring2022/main/assignments/UNIX_Assignment/fang_et_al_genotypes.txt", delim = "\t", na = "", show_col_types = FALSE)
POS <- read_delim("https://raw.githubusercontent.com/EEOB-BioData/BCB546-Spring2022/main/assignments/UNIX_Assignment/snp_position.txt", delim = "\t", na = "", show_col_types = FALSE)
list.files(./maize)
list.files("./maize")
grep(".md", list.files("./maize"))
grep(".md", list.files("./maize"), value = TRUE)
grep(".md", list.files("./maize"), value = TRUE, invert = TRUE)
?remove.files()
?files.remove()
?file.remove()
for(i in c("maize", "teosinte")){
if(paste("./", i, sep = "") %in% list.dirs()){
print(paste("./", i, "/", list.files(paste("./", i, sep = ""), sep = ""), full.names = TRUE))
} else {
dir.create(i)
}
}
for(i in c("maize", "teosinte")){
if(paste("./", i, sep = "") %in% list.dirs()){
print(list.files(paste("./", i, sep = ""), full.names = TRUE))
} else {
dir.create(i)
}
}
for(i in c("maize", "teosinte")){
if(paste("./", i, sep = "") %in% list.dirs()){
print(grep(".md", list.files(paste("./", i, sep = ""), full.names = TRUE), value = TRUE, invert = TRUE))
} else {
dir.create(i)
}
}
for(i in c("maize", "teosinte")){
if(paste("./", i, sep = "") %in% list.dirs()){
print(grep(".md", list.files(paste("./", i, sep = ""), full.names = TRUE), value = TRUE, invert = TRUE))
} else {
dir.create(i)
}
}
for(i in c("maize", "teosinte")){
if(paste("./", i, sep = "") %in% list.dirs()){
file.remove(grep(".md", list.files(paste("./", i, sep = ""), full.names = TRUE), value = TRUE, invert = TRUE))
} else {
dir.create(i)
}
}
for (species in c("maize", "teosinte")){
if (species=="maize"){
sp.group <- c("ZMMIL|ZMMLR|ZMMMR")
} else if (species=="teosinte"){
sp.group <- c("ZMPBA|ZMPIL|ZMPJA")
}
subset.geno <- t(geno[grep(sp.group, geno$Group),c(-2,-3)])
colnames(subset.geno) <- subset.geno[1,]
subset.geno <- subset.geno[2:nrow(subset.geno),]
if(all(rownames(subset.geno)==POS$SNP_ID)){
geno.POS.merge <- cbind(POS[,c(1,3,4)], subset.geno)
write.table(geno.POS.merge, file = paste(species, "_genotype_positions.txt", sep = ""), sep = "\t", col.names = TRUE, row.names = FALSE, quote = FALSE)
} else{
print("ERROR: SNP IDs do not match")
remove(geno.POS.merge)
}
all.chr <- unique(geno.POS.merge$Chromosome)
nonnumeric.chr <- all.chr[grep("[a-z]", all.chr, ignore.case = TRUE)]
numeric.chr <- all.chr[grep("[0-9]", all.chr)]
numeric.positions <- unique(geno.POS.merge$Position)[grep("[a-z]", unique(geno.POS.merge$Position), ignore.case = TRUE, invert = TRUE)]
for(chrm in all.chr){
if(chrm %in% numeric.chr){
geno.POS.merge %>%
filter(Position %in% numeric.positions) %>% ### Removes positions which are not numbers
filter(Chromosome==chrm) %>% ### Groups data by chromosome
arrange(as.numeric(Position)) %T>% ### sorts data by position
write.table(file = paste(species, "/", species, "_chr_", chrm, "_asc.txt", sep = ""), col.names = TRUE, row.names = FALSE, quote = FALSE) %>%
arrange(desc(as.numeric(Position))) %>%
lapply(., gsub, pattern = "\\?", replacement = "\\-") %>% do.call(cbind, .) %>% ### Replaces missing data symbol ?/? with -/-
write.table(file = paste(species, "/", species, "_chr_", chrm, "_desc.txt", sep = ""), sep = "\t", col.names = TRUE, row.names = FALSE, quote = FALSE)
} else if (chrm %in% nonnumeric.chr){
# geno.POS.merge %>%
#   filter(Chromosome==chrm | Position==chrm) %>%
#   arrange(Position) %>%
#   write.table(file = paste(species, "/", species, "_chr_", chrm, ".txt", sep = ""), sep = "\t", col.names = TRUE, row.names = FALSE, quote = FALSE)
} else {
print("Check Data: Unusual Chromosome Group")
}
}
}
### Read in Data
maize <- read.delim("maize_genotype_positions.txt")
teosinte <- read.delim("teosinte_genotype_positions.txt")
### Load Library
library("reshape2")
##Long format maize data
maize.reshape <- mutate(maize, cat=paste(maize$SNP_ID, maize$Chromosome, maize$Position, sep = ";"), .before = SNP_ID)
maize.reshape <- maize.reshape[,c(-2,-3,-4)] %>% melt(., id="cat")
maize.reshape <- cbind(as.data.frame(str_split(maize.reshape[,1], ";", simplify = TRUE))[,1:3], "maize", maize.reshape[,2:3])
colnames(maize.reshape) <- c("SNP_ID", "Chromosome", "Position", "Species", "Sample_ID", "Genotype")
##Long format teosine data
teosinte.reshape <- mutate(teosinte, cat=paste(teosinte$SNP_ID, teosinte$Chromosome, teosinte$Position, sep = ";"), .before = SNP_ID)
teosinte.reshape <- teosinte.reshape[,c(-2,-3,-4)] %>% melt(., id="cat")
teosinte.reshape <- cbind(as.data.frame(str_split(teosinte.reshape[,1], ";", simplify = TRUE))[,1:3], "teosinte", teosinte.reshape[,2:3])
colnames(teosinte.reshape) <- c("SNP_ID", "Chromosome", "Position", "Species", "Sample_ID", "Genotype")
##Merge long formats
reformatted.genos <- rbind(teosinte.reshape, maize.reshape)
### Read in Data
maize <- read.delim("maize_genotype_positions.txt")
teosinte <- read.delim("teosinte_genotype_positions.txt")
### Load Library
library("reshape2")
##Long format maize data
maize.reshape <- mutate(maize, cat=paste(maize$SNP_ID, maize$Chromosome, maize$Position, sep = ";"), .before = SNP_ID)
maize.reshape <- maize.reshape[,c(-2,-3,-4)] %>% melt(., id="cat")
maize.reshape <- cbind(as.data.frame(str_split(maize.reshape[,1], ";", simplify = TRUE))[,1:3], "maize", maize.reshape[,2:3])
colnames(maize.reshape) <- c("SNP_ID", "Chromosome", "Position", "Species", "Sample_ID", "Genotype")
##Long format teosine data
teosinte.reshape <- mutate(teosinte, cat=paste(teosinte$SNP_ID, teosinte$Chromosome, teosinte$Position, sep = ";"), .before = SNP_ID)
teosinte.reshape <- teosinte.reshape[,c(-2,-3,-4)] %>% melt(., id="cat")
teosinte.reshape <- cbind(as.data.frame(str_split(teosinte.reshape[,1], ";", simplify = TRUE))[,1:3], "teosinte", teosinte.reshape[,2:3])
colnames(teosinte.reshape) <- c("SNP_ID", "Chromosome", "Position", "Species", "Sample_ID", "Genotype")
##Merge long formats
reformatted.genos <- rbind(teosinte.reshape, maize.reshape)
genotypes <- unique(reformatted.genos$Genotype)
homozygous <- c("A/A", "G/G", "C/C", "T/T")
unknown <- genotypes[grep("[A|G|C|T]", genotypes, invert = TRUE)]
heterozygous <- genotypes [which((genotypes %in% c(homozygous, unknown))==FALSE)]
reformatted.genos[which(reformatted.genos$Genotype %in% unknown),7] <- "unknown"
reformatted.genos[which(reformatted.genos$Genotype %in% homozygous),7] <- "homozygous"
reformatted.genos[which(reformatted.genos$Genotype %in% heterozygous),7] <- "heterozygous"
colnames(reformatted.genos)[7] <- "SNP_Type"
reformatted.genos$Chromosome <- as.factor(reformatted.genos$Chromosome)
numeric.chr <- levels(reformatted.genos$Chromosome) %>% grep("[^a-z]", ., ignore.case = TRUE, value = TRUE) %>% as.numeric() %>% sort
non.numeric.chr <- levels(reformatted.genos$Chromosome) %>% grep("[a-z]", ., ignore.case = TRUE, value = TRUE)%>% sort
levels(reformatted.genos$Chromosome) <- c(numeric.chr, non.numeric.chr)
reformatted.genos %>%
distinct(.[,1:3]) %>%
ggplot(., aes(x=Chromosome, fill=duplicated(.[,c(2,3)]))) +
geom_bar()+
ylab("Number of SNPs")+
scale_fill_discrete(name = "Duplicated Positon")+
ggtitle("Total SNPs on Each Chromosome")
reformatted.genos %>%
distinct(.[,1:3]) %>%
ggplot(., aes(x=Chromosome, fill=duplicated(.[,c(2,3)]))) +
geom_bar()+
ylab("Number of SNPs")+
theme(axis.text.x = element_text(angle = 45))+
scale_fill_discrete(name = "Duplicated Positon")+
ggtitle("Total SNPs on Each Chromosome")
reformatted.genos %>%
distinct(.[,1:3]) %>%
ggplot(., aes(x=Chromosome, fill=duplicated(.[,c(2,3)]))) +
geom_bar()+
ylab("Number of SNPs")+
theme(axis.text.x = element_text(angle = 315))+
scale_fill_discrete(name = "Duplicated Positon")+
ggtitle("Total SNPs on Each Chromosome")
reformatted.genos %>%
distinct(.[,1:3]) %>%
ggplot(., aes(x=Chromosome, fill=duplicated(.[,c(2,3)]))) +
geom_bar()+
ylab("Number of SNPs")+
theme(axis.text.x = element_text(angle = 15))+
scale_fill_discrete(name = "Duplicated Positon")+
ggtitle("Total SNPs on Each Chromosome")
reformatted.genos %>%
# filter(SNP_Type=="heterozygous")%>%
# filter(unique(.[,1:5])) %>%
ggplot(., aes(x=Species, fill=SNP_Type)) +
geom_bar(position = "fill")+
ylab("Proportion of Total Genotyped Sites")+
scale_fill_discrete(name = "Genotype Group")+
ggtitle("Genotype Group Proportions by Species Group")
interesting.snps <- list()
unusual.cts.snps <- list()
maize.cts <- list()
teosinte.cts <- list()
for (i in unique(reformatted.genos$SNP_ID)[]){
temp.subset <- subset(reformatted.genos, reformatted.genos$SNP_ID==i)
genos.subset <- grep("?/?", unique(temp.subset$Genotype), invert=TRUE, value = TRUE, fixed=TRUE) %>% sort()
subset.maize <- subset(temp.subset, temp.subset$Species=="maize")
subset.teosinte <- subset(temp.subset, temp.subset$Species=="teosinte")
if (length(genos.subset)==3){
for(j in 1:3){
maize.cts[[j]] <- nrow(subset(subset.maize, subset.maize$Genotype==genos.subset[j]))/nrow(subset.maize)
teosinte.cts[[j]] <- nrow(subset(subset.teosinte, subset.teosinte$Genotype==genos.subset[j]))/nrow(subset.teosinte)
}
if((maize.cts[[1]]>teosinte.cts[[1]]) & (maize.cts[[1]]-.50>teosinte.cts[[1]])){
interesting.snps <- append(interesting.snps, i)
} else if ((maize.cts[[1]]<teosinte.cts[[1]]) & (maize.cts[[1]]+.50<teosinte.cts[[1]])){
interesting.snps <- append(interesting.snps, i)
} else if ((maize.cts[[2]]<teosinte.cts[[2]]) & (maize.cts[[2]]+.35<teosinte.cts[[2]])){
interesting.snps <- append(interesting.snps, i)
} else if ((maize.cts[[2]]>teosinte.cts[[2]]) & (maize.cts[[2]]-.35>teosinte.cts[[2]])){
interesting.snps <- append(interesting.snps, i)
}
} else if (length(genos.subset)!=3){
unusual.cts.snps <- append(unusual.cts.snps, i)
}
}
reformatted.genos %>%
filter(SNP_ID %in% as.character(interesting.snps)[1:20]) %>%
ggplot(., aes(x=Species, fill=Genotype))+
geom_bar(position = "fill") +
facet_wrap(.~SNP_ID)
interesting.snps <- list()
unusual.cts.snps <- list()
maize.cts <- list()
teosinte.cts <- list()
for (i in unique(reformatted.genos$SNP_ID)[]){
temp.subset <- subset(reformatted.genos, reformatted.genos$SNP_ID==i)
genos.subset <- grep("?/?", unique(temp.subset$Genotype), invert=TRUE, value = TRUE, fixed=TRUE) %>% sort()
subset.maize <- subset(temp.subset, temp.subset$Species=="maize")
subset.teosinte <- subset(temp.subset, temp.subset$Species=="teosinte")
if (length(genos.subset)==3){
for(j in 1:3){
maize.cts[[j]] <- nrow(subset(subset.maize, subset.maize$Genotype==genos.subset[j]))/nrow(subset.maize)
teosinte.cts[[j]] <- nrow(subset(subset.teosinte, subset.teosinte$Genotype==genos.subset[j]))/nrow(subset.teosinte)
}
if((maize.cts[[1]]>teosinte.cts[[1]]) & (maize.cts[[1]]-.50>teosinte.cts[[1]])){
interesting.snps <- append(interesting.snps, i)
} else if ((maize.cts[[1]]<teosinte.cts[[1]]) & (maize.cts[[1]]+.50<teosinte.cts[[1]])){
interesting.snps <- append(interesting.snps, i)
} else if ((maize.cts[[2]]<teosinte.cts[[2]]) & (maize.cts[[2]]+.35<teosinte.cts[[2]])){
interesting.snps <- append(interesting.snps, i)
} else if ((maize.cts[[2]]>teosinte.cts[[2]]) & (maize.cts[[2]]-.35>teosinte.cts[[2]])){
interesting.snps <- append(interesting.snps, i)
}
} else if (length(genos.subset)!=3){
unusual.cts.snps <- append(unusual.cts.snps, i)
}
}
reformatted.genos %>%
filter(SNP_ID %in% as.character(interesting.snps)[1:20]) %>%
ggplot(., aes(x=Species, fill=Genotype))+
geom_bar(position = "fill") +
facet_wrap(.~SNP_ID)+
ylab("Proportion of Total")+
ggtitle("Genotype Composition of Various SNPs")
knitr::opts_chunk$set(echo = TRUE)
